<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.elbigs.mapper.LineNoticeMapper">
    <select id="selectLineNoticeListForFo" resultType="java.lang.String">
          select title
            from line_notices
           where user_id = #{userPk}
             and status = true
             and (now() between start_date and end_date + 1 or period_status = true)
             and deleted_at is null
             and "type" = 'N'
    </select>
    <select id="selectPopupNoticeListForFo" resultType="java.util.HashMap">
          select n."comment" as ko
               , case when n.cn_comment is null or n.cn_comment = '' then n."comment" end as cn
               , case when n.jp_comment is null or n.cn_comment = '' then n."comment" end as jp
               , case when n.en_comment is null or n.cn_comment = '' then n."comment" end as en
               , f.full_path  as image
            from line_notices n
            join files f on f.connectable_id = n.id and f.connectable_type ='App\Models\LineNotice'
           where n.user_id = #{userPk}
             and n.status = true
             and (now() between n.start_date and n.end_date + 1 or n.period_status = true)
             and n.deleted_at is null
             and n."type" = 'P'
           order by n.updated_at desc
           limit 1
    </select>
    <select id="selectLineNoticeList" resultType="com.elbigs.dto.LineNoticeDto">
        select s.id
             , to_char(s.start_date , 'YYYY-MM-DD') as start_date
             , to_char(s.end_date , 'YYYY-MM-DD') as end_date
             , s.title
             , s.comment
             , s.status
             , s.period_status
             , s."type"
             , to_char(s.created_at , 'YYYY-MM-DD') as created_at
             , to_char(s.updated_at , 'YYYY-MM-DD') as updated_at
             , count(1) over() total_count
          from line_notices s
         where s.user_id = #{userPk}
           and s.deleted_at is null
           <if test="searchStr!=null and searchStr!=''">
           and s.title like '%'|| #{searchStr} ||'%'
           </if>
         order by s.id desc
         limit #{length} offset #{beginNo}
    </select>
    <select id="selectLineNotice" resultType="com.elbigs.entity.LineNoticeEntity">
          select s.id
               , s.user_id
               , title
               , en_title
               , cn_title
               , jp_title
               , comment
               , en_comment
               , cn_comment
               , jp_comment
               , s.status
               , s.period_status
               , s."type"
               , start_date
               , end_date
               , s.created_at
               , s.updated_at
               , s.deleted_at
            from line_notices s
           where s.id = #{id}
    </select>
    <insert id="insertLineNotice" parameterType="com.elbigs.entity.LineNoticeEntity">
        insert into line_notices (
                     user_id
                   , title
                   , en_title
                   , cn_title
                   , jp_title
                   , comment
                   , en_comment
                   , cn_comment
                   , jp_comment
                   , status
                   , period_status
                   , "type"
                   , start_date
                   , end_date
                   , created_at )
        values (  #{userId}, #{title}, #{enTitle}, #{cnTitle}, #{jpTitle}
                , #{comment}, #{enComment}, #{cnComment}, #{jpComment}, #{status}, #{periodStatus}, #{type}, TO_TIMESTAMP(#{startDate}, 'yyyy-mm-dd'), TO_TIMESTAMP(#{endDate}, 'yyyy-mm-dd'), now())
        <selectKey keyProperty="id" resultType="long" order="AFTER">
            select currval('line_notices_id_seq')
        </selectKey>
    </insert>
   <update id="updateLineNotice">
           update line_notices
              set user_id = #{userId}
                , title = #{title}
                , en_title = #{enTitle}
                , cn_title = #{cnTitle}
                , jp_title = #{jpTitle}
                , comment = #{comment}
                , en_comment = #{enComment}
                , cn_comment = #{cnComment}
                , jp_comment = #{jpComment}
                , status = #{status}
                , period_status = #{periodStatus}
                , "type" = #{type}
                , start_date = TO_TIMESTAMP(#{startDate}, 'yyyy-mm-dd')
                , end_date = TO_TIMESTAMP(#{endDate}, 'yyyy-mm-dd')
                , updated_at = now()
            where id = #{id}
    </update>
    <update id="deleteLineNotice">
       update line_notices
          set deleted_at = now()
        where id = #{id}
    </update>
</mapper>
